// <auto-generated />
using System;
using BotMaster.RightsManagement;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DbMigrationDecoy.Migrations
{
    [DbContext(typeof(UserConnectionContext))]
    partial class UserConnectionContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BotMaster.RightsManagement.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Group", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("BotMaster.RightsManagement.PlattformUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PlattformUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PlattformUsers", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("BotMaster.RightsManagement.Right", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Right", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("BotMaster.RightsManagement.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("BotMaster.RightsManagement.UserConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Connected")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ConnectionCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PlattformUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PlattformUserId");

                    b.ToTable("UserConnections");
                });

            modelBuilder.Entity("GroupPlattformUser", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("int");

                    b.Property<int>("PlattformUsersId")
                        .HasColumnType("int");

                    b.HasKey("GroupsId", "PlattformUsersId");

                    b.HasIndex("PlattformUsersId");

                    b.ToTable("GroupPlattformUser", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("GroupRight", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("int");

                    b.Property<int>("RightsId")
                        .HasColumnType("int");

                    b.HasKey("GroupsId", "RightsId");

                    b.HasIndex("RightsId");

                    b.ToTable("GroupRight", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("GroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("GroupUser", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("PlattformUserRight", b =>
                {
                    b.Property<int>("PlattformUsersId")
                        .HasColumnType("int");

                    b.Property<int>("RightsId")
                        .HasColumnType("int");

                    b.HasKey("PlattformUsersId", "RightsId");

                    b.HasIndex("RightsId");

                    b.ToTable("PlattformUserRight", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("RightUser", b =>
                {
                    b.Property<int>("RightsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("RightsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RightUser", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("BotMaster.RightsManagement.PlattformUser", b =>
                {
                    b.HasOne("BotMaster.RightsManagement.User", "User")
                        .WithMany("PlatformIdentities")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BotMaster.RightsManagement.UserConnection", b =>
                {
                    b.HasOne("BotMaster.RightsManagement.PlattformUser", "PlattformUser")
                        .WithMany()
                        .HasForeignKey("PlattformUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlattformUser");
                });

            modelBuilder.Entity("GroupPlattformUser", b =>
                {
                    b.HasOne("BotMaster.RightsManagement.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BotMaster.RightsManagement.PlattformUser", null)
                        .WithMany()
                        .HasForeignKey("PlattformUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupRight", b =>
                {
                    b.HasOne("BotMaster.RightsManagement.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BotMaster.RightsManagement.Right", null)
                        .WithMany()
                        .HasForeignKey("RightsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.HasOne("BotMaster.RightsManagement.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BotMaster.RightsManagement.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlattformUserRight", b =>
                {
                    b.HasOne("BotMaster.RightsManagement.PlattformUser", null)
                        .WithMany()
                        .HasForeignKey("PlattformUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BotMaster.RightsManagement.Right", null)
                        .WithMany()
                        .HasForeignKey("RightsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RightUser", b =>
                {
                    b.HasOne("BotMaster.RightsManagement.Right", null)
                        .WithMany()
                        .HasForeignKey("RightsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BotMaster.RightsManagement.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BotMaster.RightsManagement.User", b =>
                {
                    b.Navigation("PlatformIdentities");
                });
#pragma warning restore 612, 618
        }
    }
}
